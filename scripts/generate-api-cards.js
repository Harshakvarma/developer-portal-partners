const fs = require('fs');
const path = require('path');
const yaml = require('js-yaml');

/**
 * Add product url to cards
 *
 * @param {string} location Location
 * @param {string} filesDirectory FilesDirectory
 * @param {fs.Dirent} file File
 * @return {object} cards with product url
 */
function addProductUrlToCards(location, filesDirectory, file) {
  const yamlData = yaml.load(fs.readFileSync(location).toString());

  const overview = fs.existsSync(
    path.resolve(`${filesDirectory}/${file.name}/overview.md`)
  );
  const index = fs.existsSync(
    path.resolve(`${filesDirectory}/${file.name}/index.md`)
  );
  const home = fs.existsSync(
    path.resolve(`${filesDirectory}/${file.name}/home.md`)
  );

  if (!["guidelines"].includes(file.name)) {
    let url = `${file.name}/`;
    if (overview) {
      url += "overview.html";
    } else if (index) {
      url += "index.html";
    } else if (home) {
      url += "home.html";
    } else {
      if (file.name !== "resources") {
        console.error(
          `❌ a product needs to have an overview, index or home page in folder ${file.name}`
        );
        process.exit(1);
      }
    }

    const maintainersFile = path.resolve(
      `${filesDirectory}/${file.name}/maintainers.yml`
    );
    if (!fs.existsSync(maintainersFile)) {
      console.error(`❌ a product needs to have ${maintainersFile}`);
      process.exit(1);
    }

    const maintainers = yaml.load(fs.readFileSync(maintainersFile, "utf8"));
    yamlData.forEach((item) => {
      for (const maintainer of maintainers) {
        if (!maintainer.operating_company) {
          console.error(`❌ operating company in ${maintainersFile} is empty.`);
          process.exit(1);
        }
        if (!maintainer.contribution.workflow) {
          console.error(
            `❌ contribution.workflow company in ${maintainersFile} is empty.`
          );
          process.exit(1);
        }

        item["operating_company"] = maintainer.operating_company;
        item["contribution_workflow"] = maintainer.contribution.workflow;
      }

      item["producturl"] = url;
    });
  }

  return yamlData;
}

/**
 * Recursively gather api cards information from apis.external/internal.yml files.
 *
 * @param {string} filesDirectory - The path to the directory containing the files.
 * @return {string} A single string containing the concatenated content of all files in the directory.
 */
function recursivelyConcatAPICardsContent(filesDirectory) {
  let cards = "";
  fs.readdirSync(filesDirectory, { withFileTypes: true }).forEach((file) => {
    if (file.isDirectory()  && !["contribution-guidelines"].includes(file.name)) {
      if (
        fs.existsSync(
          path.resolve(`${filesDirectory}/${file.name}/apis.external.yml`)
        )
      ) {
        const location = path.resolve(
          `${filesDirectory}/${file.name}/apis.external.yml`
        );
        const yamlData = addProductUrlToCards(location, filesDirectory, file);
        cards += yaml.dump(yamlData);
      } else {
        console.error(
          `❌ apis.external.yml in ${filesDirectory} is missing.`
        );
        process.exit(1);
      }
    }
  });

  return cards;
}

const cards = recursivelyConcatAPICardsContent("docs");

const template = (cards) => `---
# Important
# This file has been autogenerated
# Add content in apis.internal.yml or apis.external.yml files on each directory inside docs/
# to add cards to the API-catalogue!

hide:
- toc
- navigation

search:
exclude: true

hide_comments: true

template: partials/apis.html
cards:
${cards}

---

# API & SDK Catalogue

Explore the Siemens Catalogue of Industrial APIs and SDKs, ready for tailored solutions.

<!-- markdownlint-disable no-inline-html -->
<div id="global-filter-info" class="admonition info" style="display:none">
<p class="admonition-title">
View applied
</p>
<p class="admonition-body">
The content currently displayed is limited to the selected view. <a href="#" id="filter-reset">Click here</a> to access the full content.
</p>
</div>
<!-- markdownlint-enable no-inline-html -->
`;

fs.writeFileSync("docs/apis.md", template(cards.toString()));
// Expose file to be used by find.siemens.com.
fs.writeFileSync("docs/apis.yml", cards.toString());
console.log(`Generated apis.md, apis.yml`);
